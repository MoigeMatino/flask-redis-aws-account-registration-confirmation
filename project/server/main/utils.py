from itsdangerous import BadSignature, SignatureExpired, URLSafeTimedSerializer
from flask import current_app, url_for

def encode_token(email):
    # create serializer object with secret key for signing the token
    serializer = URLSafeTimedSerializer(current_app.config['SECRET_KEY'])
    # serialize and sign the email address with an additional salt for security
    return serializer.dumps(email, salt=current_app.config['SECURITY_PASSWORD_SALT'])

def decode_token(token, expiration=3600):
    """
    Decodes a token generated by the `encode_token` function and retrieves the email address.
    """
    # create a serializer using the application's secret key
    serializer = URLSafeTimedSerializer(current_app.config['SECRET_KEY'])
    try:
        # attempt to deserialize and validate the token with salt and expiration check
        email = serializer.loads(
            token, 
            salt=current_app.config['SECURITY_PASSWORD_SALT'], 
            max_age=expiration
        )
        return email
    except SignatureExpired as e:
        return "Token expired"  # Return a specific message for expired tokens
    except BadSignature as e:
        return "Invalid token signature"  # Return a message for invalid signature
    except Exception as e:
        # Handle other unexpected exceptions
        return False
    
def generate_url(endpoint, token):
    return url_for(endpoint, token=token, _external=True)



